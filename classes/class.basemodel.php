<?php
  /**
   * The BaseModel handles all the DB-Interaction for
   * creating updating and reading data.
   */
  abstract class BaseModel {
    const DATA_UNDEF = 1;
    const DATA_DRAFT = 2;
    const DATA_DB    = 3;

    protected static $TABLE = null;
    // Please notice, the ID column is automatically generated by the db class
    protected static $COLUMN_NAMES = array();
    // The number of the column types has to exactly match the number of the column names
    // because they are later combined when creating the database table
    protected static $COLUMN_TYPES = array();
    // Those keys are ignored when setting data
    protected static $IGNORE_KEYS = array('id');

    // defines the status of the data and if it has already an id / instance in the db
    protected  $data_status = BaseModel::DATA_UNDEF;
    // associative array. The keys in this arrays correspond to the $COLUMN_NAMES-values
    protected $data;

    /**
     * Constructor for loading data in the model
     * Either provide the id XOR $data
     * @param int id - id in the database
     * @param array data - data to load into th data array this does not create a new entry in the db use Model::create($data) instead
     */
    public function __construct($id=null, $data=null) {
      static::_initTable();

      if(is_null($id) && is_null($data) || !is_null($id) && !is_null($data))
        throw new Exception("Can not instantiate Model, please provid id or data");

      $db = Core::instance()->getDb();
      if(!is_null($id)) {
        // Can't use static::findFirst, or it will result in endless recursion
        $data = Core::instance()->getDb()->selectFirst(static::$TABLE, array('id' => $id));
        $this->data_status = BaseModel::DATA_DB;
      } else {
        foreach($data as $key)
          if(in_array($key, static::$IGNORE_KEYS))
            unset($data[$key]);

        $this->data_status = BaseModel::DATA_DRAFT;
      }

      if($data == null)
        return null;

      $this->data = $data;
    }

    /**
     * instantiates a child instance from the BaseModel-Class
     *
     * @param int id - the id inside of the database
     * @return: if the id is not found or not defined null is returned
     *          else an instance of the child class
     */
    protected static function childInstance($id=null) {
      if($id == null)
        return null;

      $cls = get_called_class();
      return new $cls($id);
    }

    /**
     * Creates and saves a new Model to the data
     *
     * @return a new Instance of the model
    */
    public static function create($data) {
      static::_initTable();

      foreach(static::$IGNORE_KEYS as $key)
        if(array_key_exists($key, $data))
          unset($data[$key]);


      $id = Core::instance()->getDb()->insertSingle(static::$TABLE, $data, static::$COLUMN_NAMES);
      return static::childInstance($id);
    }

    /**
     * Find all the model-instances which match the provided conditions.
     *
     * @param array $conditions The conditions array.
     *
     * @return array<ConcreteModel> Array with the instantiate models
     */
    public static function find($conditions=null) {
      $result = static::findList($conditions);
      $return = array();
      foreach($result as $data)
        $return[] = static::childInstance($data['id']);
      return $return;
    }

    /**
     * Find all rows in the db which match the provided conditions.
     * Use this method if the interaction via the model is not necessary.
     *
     * @param array $conditions - The conditions array.
     * @param array $columns - The columns which will be returned
     *
     * @return array<array<mixed>> Associative-table array
     */
    public static function findList($conditions=null, $columns=array('id')) {
      static::_initTable();
      if(!is_null($conditions))
        static::_validateColumns($conditions);

      $result = Core::instance()->getDb()->select(static::$TABLE, $conditions, $columns);

      return $result;
    }

    /**
     * Finds the first row in the db which match the provided conditions.
     * Use this method if the interaction via the model is not necessary.
     *
     * @param array $conditions - The conditions array.
     * @param array $columns The - columns which will be returned
     *
     * @return ConcreteModel $model - An instance of the relevant model
     */
    public static function findFirst($conditions, $columns=array('id')) {
      static::_initTable();
      if(!is_null($conditions))
        static::_validateColumns($conditions);
      $data = Core::instance()->getDb()->selectFirst(static::$TABLE, $conditions, $columns);

      return static::childInstance($data['id']);
    }

    /**
     * Finds the first row in the db which match the provided conditions.
     * Use this method if the interaction via the model is not necessary.
     *
     * @param array $conditions - The conditions array.
     * @param array $columns The - columns which will be returned
     *
     * @return array $data - An the data of the db-row
     */
    public static function findFirstPlain($conditions, $columns=array('id')) {
      static::_initTable();
      if(!is_null($conditions))
        static::_validateColumns($conditions);
      return  Core::instance()->getDb()->selectFirst(static::$TABLE, $conditions, $columns);

    }

    /**
     * Updates the data of the model in the database.
     * if not already in the db the model-data is now added.
     *
     * @param array $data - The new data... if null it updates the current data
     */
    public function update($data=null) {

      if(is_array($data))
        $this->setData($data);

      if($this->data_status != BaseModel::DATA_DB) {
        $this->_saveUpdate();
        return;
      }

      $data = $this->data;
      foreach($data as $key => $value)
        if(!in_array($key, static::$COLUMN_NAMES) || in_array($key, static::$IGNORE_KEYS))
          unset($data[$key]);

      Core::instance()->getDb()->update(static::$TABLE, $data, array(
        'id' => $this->id()
      ));

    }

    /**
     * Deletes the Entry from the database
     */
    public function delete() {
      Core::instance()->getDb()->delete(static::$TABLE, array(
        'id' => $this->id()
      ));
    }
    /**
     *  Sugar for getting the id inside the current data-property
     *
     * @return int $id - the current id
     */
    public function id() {
      return $this->data['id'];
    }

    /**
     * Return the data-array
     *
     * @return array<mixed> $data - the data of the current model
     */
    public function getData() {
      return $this->data;
    }

    /**
     * Get a specific value form the data-property
     *
     * @return mixed $value - the requested value or void
     * tschm23: empty/null values got a warning, -> added @array_key...
	 */
    public function getValue($key) {
      if(@array_key_exists($key, $this->data))
        return $this->data[$key];
    }

    /**
     * Sets the data-property with new vales.
     *
     * @param array<mixed> $data - The data as an assoc-array
     */
    public function setData($data) {
      foreach($this->data as $key => $value)
        $this->setValue($key, $value);
    }

    public function setValue($key, $value) {
      if(in_array($key, static::$IGNORE_KEYS))
        return;
      $this->data[$key] = $value;
    }

    /**
     * Has to be called by all static methods to ensure the table exists.
     * Creates the table with the provided column-settings of the child-class
     */
    private static function _initTable() {
      $db = Core::instance()->getDb();

      if($db->tableExists(static::$TABLE))
        return;

      $db_columns = array();

      foreach(static::$COLUMN_NAMES as $key => $col)
        $db_columns[] = array($col, static::$COLUMN_TYPES[$key]);

      $db->createTable(static::$TABLE, $db_columns);
    }

    /**
     * Returns the table of the child class
     *
     * @return string $table
     */
    public static function table() {
      return static::$TABLE;
    }

    /**
     *  Returns the colum names of the child class
     *
     * @return array<string> $names
     */
    public static function column_names() {
      return static::$COLUMN_NAMES;
    }

    /**
     * Saves the current data via the Model::create() method
     * and updates the data and data_status properties
     */
    private function _saveUpdate() {
      $instance = static::create($this->data);
      $this->data = $instance->getData();
      $this->data_status = BaseModel::DATA_DB;
    }

    /**
     * Validates the provided column-name array (if they exist in the
     * ChildClass config)
     *
     * @param array<string> $columns
     * @return bool $valid - TRUE or exception thrown
     */
    private static function _validateColumns($columns) {
      foreach($columns as $key => $value)
        if(!in_array($key, static::$IGNORE_KEYS) && !in_array($key, static::$COLUMN_NAMES))
          throw new Exception("The requested column " . static::$TABLE . "::$key in BaseModel::find does not exist");
      return true;
    }

  }
?>